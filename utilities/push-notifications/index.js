import AsyncStorage from "@react-native-community/async-storage";

import { Notifications } from 'react-native-notifications';
const PushNotification = require('react-native-push-notification');


export default class NotificationSetup {

  static configure() {
    console.log("Configuring token...");

    // Notifications.events().registerRemoteNotificationsRegistered((event) => {
    //   console.log("Device Notification token: " + event.deviceToken);

    //   AsyncStorage.setItem("deviceNotificationToken", JSON.stringify(event.deviceToken));
    // });

    // Notifications.events().registerRemoteNotificationsRegistrationFailed((event) => {
    //   console.log(event);
    // });

    // Notifications.registerRemoteNotifications();
    PushNotification.configure({
      onRegister: function(token) {
        console.log("Device token:" + token);

        AsyncStorage.setItem("deviceNotificationToken", JSON.stringify(event.deviceToken));
      },
      onNotification: function(notification) {
        console.log(notification);
      },

      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      popInitialNotification: true,
      requestPermissions: true,
    })
  }

  static handleNotification() {
    // application once the app is active
    Notifications.events().registerNotificationReceivedForeground((notification, completion) => {
      console.log(notification.payload);

      completion({alert: true, sound: true, badge: false});
    });

    // application once the app is dead or in pause
    Notifications.events().registerNotificationReceivedBackground((notification, completion) => {
      console.log(notification.payload);

      completion({alert: true, sound: true, badge: false});
    });

    // notification has been opened
    Notifications.events().registerNotificationOpened((notification, completion, action) => {
      console.log(notification.payload);

      completion();
    });
  }

  /**
   * 
   * @param {{
   *  body: String,
   *  title: String,
   *  silent: Boolean
   * }} messageBody message to be posted
   * @param {String} time string in the format 30_MINUTES (Number_timeCategory)
   */
  static async postScheduledNotification(messageBody, time) {
    let fireDate = new Date().getTime(); // gets the timestamp of now
    let minutes = Number(time.split("_")[0]); // get the minutes
    fireDate += (minutes * 1000);
    let id = await NotificationSetup.getNotificationId();

    PushNotification.localNotificationSchedule({
      /* Android Only Properties */
      id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "digital_matatus", // (optional) default: "ic_launcher"
      smallIcon: "digital_matatus", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: messageBody.body, // (optional) default: "message" prop
      subText: "Add Matatu details", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: "some_tag", // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
      allowWhileIdle: true, // (optional) set notification to work while on doze, default: false
      ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)

      /* iOS only properties */
      alertAction: "view", // (optional) default: view
      category: "", // (optional) default: empty string
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

      /* iOS and Android properties */
      title: messageBody.title, // (optional)
      message: messageBody.body, // (required)
      playSound: false, // (optional) default: true
      soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      // actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      date: new Date(fireDate)
    });
  }

  static async getNotificationId() {
    let id = (await AsyncStorage.getItem("NOTIFICATION_ID"));
    console.log("Fetched Id: " + id);
    let NOTIFICATION_ID;

    try {
      let id = Number(id);
    } catch(err) {
      id = null;
    }

    if(id) {
      NOTIFICATION_ID = Number(id);
    } else {
      NOTIFICATION_ID = 100;
    }

    let newId = NOTIFICATION_ID + 1;

    await AsyncStorage.setItem("NOTIFICATION_ID", JSON.stringify(newId));

    console.log("NOTIFICATION-ID" + NOTIFICATION_ID)
    return NOTIFICATION_ID;
  }

}
